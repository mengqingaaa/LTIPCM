using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

using System.Data.Entity;
using System.Collections.ObjectModel;
using LTIPCM.Model;

namespace LTIPCM.Service
{

    public interface IDataAccessService
    {
        /// <summary>
        /// Get All Client Entities
        /// </summary>
        /// <returns>ObervableCollection of Clients</returns>
        ObservableCollection<Client> GetClients();

        /// <summary>
        /// Get All Case Entities for CaseViewModel
        /// </summary>
        /// <returns>A ObservableCollection of Cases</returns>
        ObservableCollection<Case> GetCases();

        /// <summary>
        /// Add a new Client entity
        /// </summary>
        /// <param name="client"></param>
        /// <returns>The key of the newly added client, generated by the database</returns>
        int AddClient(Client client);

        void SaveClient(Client client);

        Client GetClient(int clientId);
    }

    public class DataAccessServices : IDataAccessService
    {
        /// <summary>
        /// Instance of DbContext of the Entity framework
        /// </summary>
//        private EntitiesContext context;

        /// <summary>
        /// Initialize the context
        /// </summary>
        public DataAccessServices()
        {
//            context = new EntitiesContext();
        }

        #region ClientViewModel related
        public ObservableCollection<Client> GetClients()
        {
            var clients = new ObservableCollection<Client>();

            using (var context = new EntitiesContext())
            {
                foreach (var item in context.Clients)
                {
                    clients.Add(item);
                }
            }

            return clients;
        }

        public int AddClient(Client client)
        {
            throw new NotImplementedException();
        }

        public void SaveClient(Client client)
        {
            using (var context = new EntitiesContext())
            {
                if (client.ClientID != 0)
                {
                    context.Entry(client).State = EntityState.Modified;
                }
                else
                {
                    context.Entry(client).State = EntityState.Added;
                }
                context.SaveChanges();
            }
        }

        public Client GetClient(int clientId)
        {
            Client client;
            using (var context = new EntitiesContext())
            {
                client = (from c in context.Clients
                              where c.ClientID == clientId
                              select c).FirstOrDefault();
            }
            return client;
        }
        #endregion

        #region CaseViewModel related
        public ObservableCollection<Case> GetCases()
        {
            var cases = new ObservableCollection<Case>();

            using (var context = new EntitiesContext())
            {
                foreach (var item in context.Cases)
                {
                    cases.Add(item);
                }
            }
            return cases;
        }
        #endregion
    }
}
